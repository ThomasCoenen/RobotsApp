{"version":3,"sources":["Card.js","CardList.js","SearchBox.js","Scroll.js","ErrorBoundary.js","App.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uOAgBeA,EAdF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAC5B,OACW,sBAAKC,UAAU,sDAAf,UAEI,qBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,gCAEI,6BAAKF,IACL,4BAAIC,WCoBTK,EA1BE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAQhB,OACI,8BAEIA,EAAOC,KAAI,SAACC,EAAMC,GAClB,OACI,cAAC,EAAD,CAEIR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,OAHZS,SCFVC,EAdG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAC9B,OACI,qBAAKV,UAAU,MAAf,SACI,uBACIA,UAAU,mCACVW,KAAK,SACLC,YAAY,gBAEZC,SAAUH,OCGXI,EAXA,SAACC,GACZ,OAII,aAHA,CAGA,OAAKC,MAAO,CAAEC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,SAAtE,SACKJ,EAAMK,YCsBJC,E,kDA3BX,WAAYN,GAAQ,IAAD,8BACf,cAAMA,IACDO,MAAQ,CACTC,UAAU,GAHC,E,8DAUDC,EAAOC,GACrBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAO1B,OAAIG,KAAKJ,MAAMC,SACJ,uDAGJG,KAAKX,MAAMK,a,GAvBEQ,aCoFbC,G,wDApEb,aAAe,IAAD,8BACZ,gBAsBFC,eAAiB,SAACC,GAKhB,EAAKJ,SAAS,CAAElB,YAAasB,EAAMC,OAAOC,SAzB1C,EAAKX,MAAQ,CACXlB,OAAQ,GACRK,YAAa,IALH,E,gEAUO,IAAD,OAKlByB,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAKA,EAASC,UAC3BF,MAAK,SAAAG,GAAK,OAAI,EAAKX,SAAS,CAAEvB,OAAQkC,S,+BAelC,MAEyBZ,KAAKJ,MAA7BlB,EAFD,EAECA,OAAQK,EAFT,EAESA,YAEV8B,EAAiBnC,EAAOoC,QAAO,SAAAC,GAGnC,OAAOA,EAAM5C,KAAK6C,cAAcC,SAASlC,EAAYiC,kBAQvD,OAAsB,IAAlBtC,EAAOwC,OACF,yCAGL,sBAAK5C,UAAU,KAAf,UACE,oBAAIA,UAAU,KAAd,yBAEA,cAAC,EAAD,CAAWU,aAAcgB,KAAKI,iBAC9B,cAAC,EAAD,UAGE,cAAC,EAAD,UACE,cAAC,EAAD,CAAU1B,OAAQmC,e,GAhEdX,cCDHiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCCdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAG1BZ,M","file":"static/js/main.a2a560d7.chunk.js","sourcesContent":["import React from 'react';\n \nconst Card = ({ name, email, id }) => {   //now Cars must accept params which is PROPS\n\treturn (\n            <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n                {/* <h1>RoboFriends</h1> */}\n                <img alt=\"robots\" src={`https://robohash.org/${id}?200x200`}/>\n                <div>\n                    {/* add props like this */}\n                    <h2>{name}</h2> \n                    <p>{email}</p>\n                </div>\n            </div>\n    )\n}\n\nexport default Card; \n\n","import React from 'react';\n// import App from '../containers/App'\nimport Card from './Card'\n\nconst CardList = ({ robots }) => {\n    //throw an Error just to test our ErrorBoundary\n    // if (true) {\n    //     throw new Error('NOOOOO')\n    // }\n\n\n    //just add within the Return brackets since its JS\n    return (\n        <div>\n           {\n            robots.map((user, i) => {\n            return (\n                <Card  //use BRACKET if returning on multiple lines\n                    key={i} \n                    id={robots[i].id} \n                    name={robots[i].name} \n                    email={robots[i].email}\n                />\n                );  \n            })\n           }\n        </div> \n    )\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n    return (\n        <div className='pa2'>\n            <input \n                className='pa3 ba b--green bg-lightest-blue' \n                type='search' \n                placeholder='search robots' \n                //Now we will get the event when we type in input\n                onChange={searchChange}\n            />\n        </div>\n    )\n}\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        //just add inline styles to this now for our Scrollable Comp\n        //Use Double Curly brackets for inline styles.\n        //1st curly braces=JS Expression. 2nd Curly Braces=Returns Object\n        <div style={{ overflowY: 'scroll', border: '3px solid black', height: '800px'}}>  \n            {props.children}   \n        </div>\n    )\n}\n\nexport default Scroll;\n","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n    constructor(props) {  //so we have access to props put props here\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    //how do we change the hasError? We can use a Lifecycle Method: \n    //componentDidCatch() ->like try/catch block in JS. If anything errors \n    //out it runs this lifecycle hook    \n    componentDidCatch(error, info) {\n        this.setState({ hasError: true }) //if Comp errors out set hasError: true, and we render the H1 t\n    }\n\n    render() {\n        //We can wrap a Comp like the CartList w/ an ErrBoundary Comp and if \n        //Cartlist comp fails we can catch it in the ErrorBoundary Comp\n\n        if (this.state.hasError) { //check if this.state.hasError=True\n            return <h1>Ooops that's not good</h1> //if there an error spit this out\n        }\n        //otherwise (can just do a return)\n        return this.props.children //bc children is anything in between ErrBoundary\n    }\n}\n\n\nexport default ErrorBoundary;\n","import React, { Component } from 'react';\n// import CardList from '../components/CardList'; //use '..' when u are leaving a folder\nimport CardList from './CardList';\n// import SearchBox from '../components/SearchBox';\nimport SearchBox from './SearchBox';\n// import Scroll from '../components/Scroll';\nimport Scroll from './Scroll';\nimport ErrorBoundary from './ErrorBoundary';\nimport './App.css';\n// import { robots } from './robots'; //since this isnt default must destructure. No longer Need since using the API\n\n//to use STATE must go back to the original way we created react Components ->\n//done by creating a CLASS Comp\nclass App extends Component {\n  //ADD STATE -> must use a CONSTRUCTOR funct. Declare the STATE in the constructor funct\n  //Now we have our STATE. STATE is what descirbes our App and are the things that can CHANGE\n  //that can affect our app. STATE usually lives in the PARENT COMP and passes STATE down to\n  //diffenent components \n  constructor() {\n    super()\n    //add STATE in our App (description of what our state should be)\n    this.state = {\n      robots: [],   //state need to have robots arr\n      searchfield: ''  //searchfield is an empty str\n    }\n  }\n\n  //use to get Data from an API\n  componentDidMount() {\n    //Fetch the users-makes an HTTP request to a server. \n    //Fetch recieves a Response.\n    //FETCH is a method on the WINDOW obj. Thats why it doesn't have\n    //anything attached to it (id a .)\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response =>  response.json()) //convert the response to JSON\n      .then(users => this.setState({ robots: users })) //now we're getting users back. Update them\n  }\n\n  //Make a funct for Searching stuff for the Input. MUST USE ARROW FUNCT syntax when\n  //we make our OWN methods \n  //everytime INPUT changes we get an EVENT (like in DOM manipulation)\n  onSearchChange = (event) => {\n    // console.log(event)  // gives us the entire event\n    // console.log(event.target.value) //gives us the value of the event\n    //Update the Seachfield bc its set to an empty str originally. Anytime u change change\n    //state u use this method\n    this.setState({ searchfield: event.target.value }) //searchfield always gets updated now\n    // console.log(filteredRobots)\n  }\n\n  render() {\n    //Destructuring- we say this.state a lot\n    const { robots, searchfield } = this.state;\n    //Robots is an Array\n    const filteredRobots = robots.filter(robot => {\n      //lowercase the name. If name of robots includes the SeachField(in lowercase so it \n      //works both ways). Returns Robots that turn True to this\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase()) \n    })\n\n    //What if componentDidMount() took a long time to load and we have a \n    //whole bunch of users?-> take care of this in the Render Method \n    //b4 Return\n    //could also say:\n    // if (!robots.length)  -> automatically means 0. 0==false in JS\n    if (robots.length === 0) {\n      return <h1>Loading</h1>  //add loading bar in case takes long\n    } else {\n      return (\n        <div className='tc'>\n          <h1 className='f1'>RoboFriends</h1>\n          {/* //searchChange is a PROP */}\n          <SearchBox searchChange={this.onSearchChange}/>  \n          <Scroll>\n            {/* If anything in CartList fails it will catch in the ErrorBoudary and\n            display our error message */}\n            <ErrorBoundary>  \n              <CardList robots={filteredRobots}/>  \n            </ErrorBoundary>\n          </Scroll>\n        </div>\n      )\n    }\n  }\n}\n\nexport default App;\n\n\n//Now that the Parent has the value of the SEARCH Input we can directly communicate the \n//Search Inputs Value to the CardList comp\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './containers/App/'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />   \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}