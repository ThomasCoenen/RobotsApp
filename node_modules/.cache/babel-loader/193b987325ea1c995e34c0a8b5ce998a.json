{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/thomascoenen/Documents/MyOwnProjects/GHTestFolder/RobotsApp/src/App.js\";\nimport React, { Component } from 'react'; // import CardList from '../components/CardList'; //use '..' when u are leaving a folder\n\nimport CardList from './CardList'; // import SearchBox from '../components/SearchBox';\n\nimport SearchBox from './SearchBox'; // import Scroll from '../components/Scroll';\n\nimport Scroll from './Scroll';\nimport './App.css'; // import { robots } from './robots'; //since this isnt default must destructure. No longer Need since using the API\n//to use STATE must go back to the original way we created react Components ->\n//done by creating a CLASS Comp\n\nclass App extends Component {\n  //ADD STATE -> must use a CONSTRUCTOR funct. Declare the STATE in the constructor funct\n  //Now we have our STATE. STATE is what descirbes our App and are the things that can CHANGE\n  //that can affect our app. STATE usually lives in the PARENT COMP and passes STATE down to\n  //diffenent components \n  constructor() {\n    super(); //add STATE in our App (description of what our state should be)\n\n    this.onSearchChange = event => {\n      // console.log(event)  // gives us the entire event\n      // console.log(event.target.value) //gives us the value of the event\n      //Update the Seachfield bc its set to an empty str originally. Anytime u change change\n      //state u use this method\n      this.setState({\n        searchfield: event.target.value\n      }); //searchfield always gets updated now\n      // console.log(filteredRobots)\n    };\n\n    this.state = {\n      robots: [],\n      //state need to have robots arr\n      searchfield: '' //searchfield is an empty str\n\n    };\n  } //use to get Data from an API\n\n\n  componentDidMount() {\n    //Fetch the users-makes an HTTP request to a server. \n    //Fetch recieves a Response.\n    //FETCH is a method on the WINDOW obj. Thats why it doesn't have\n    //anything attached to it (id a .)\n    fetch('https://jsonplaceholder.typicode.com/users').then(response => response.json()) //convert the response to JSON\n    .then(users => this.setState({\n      robots: users\n    })); //now we're getting users back. Update them\n  } //Make a funct for Searching stuff for the Input. MUST USE ARROW FUNCT syntax when\n  //we make our OWN methods \n  //everytime INPUT changes we get an EVENT (like in DOM manipulation)\n\n\n  render() {\n    //Destructuring- we say this.state a lot\n    const {\n      robots,\n      searchfield\n    } = this.state; //Robots is an Array\n\n    const filteredRobots = robots.filter(robot => {\n      //lowercase the name. If name of robots includes the SeachField(in lowercase so it \n      //works both ways). Returns Robots that turn True to this\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n    }); //What if componentDidMount() took a long time to load and we have a \n    //whole bunch of users?-> take care of this in the Render Method \n    //b4 Return\n    //could also say:\n    // if (!robots.length)  -> automatically means 0. 0==false in JS\n\n    if (robots.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 14\n      }, this); //add loading bar in case takes long\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tc\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"f1\",\n          children: \"RoboFriends\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(SearchBox, {\n          searchChange: this.onSearchChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Scroll, {\n          children: /*#__PURE__*/_jsxDEV(CardList, {\n            robots: filteredRobots\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this);\n    }\n  }\n\n}\n\nexport default App; //Now that the Parent has the value of the SEARCH Input we can directly communicate the \n//Search Inputs Value to the CardList comp","map":{"version":3,"sources":["/Users/thomascoenen/Documents/MyOwnProjects/GHTestFolder/RobotsApp/src/App.js"],"names":["React","Component","CardList","SearchBox","Scroll","App","constructor","onSearchChange","event","setState","searchfield","target","value","state","robots","componentDidMount","fetch","then","response","json","users","render","filteredRobots","filter","robot","name","toLowerCase","includes","length"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;;AACA,OAAOC,QAAP,MAAqB,YAArB,C,CACA;;AACA,OAAOC,SAAP,MAAsB,aAAtB,C,CACA;;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAO,WAAP,C,CACA;AAEA;AACA;;AACA,MAAMC,GAAN,SAAkBJ,SAAlB,CAA4B;AAC1B;AACA;AACA;AACA;AACAK,EAAAA,WAAW,GAAG;AACZ,YADY,CAEZ;;AAFY,SAuBdC,cAvBc,GAuBIC,KAAD,IAAW;AAC1B;AACA;AACA;AACA;AACA,WAAKC,QAAL,CAAc;AAAEC,QAAAA,WAAW,EAAEF,KAAK,CAACG,MAAN,CAAaC;AAA5B,OAAd,EAL0B,CAKyB;AACnD;AACD,KA9Ba;;AAGZ,SAAKC,KAAL,GAAa;AACXC,MAAAA,MAAM,EAAE,EADG;AACG;AACdJ,MAAAA,WAAW,EAAE,EAFF,CAEM;;AAFN,KAAb;AAID,GAZyB,CAc1B;;;AACAK,EAAAA,iBAAiB,GAAG;AAClB;AACA;AACA;AACA;AACAC,IAAAA,KAAK,CAAC,4CAAD,CAAL,CACGC,IADH,CACQC,QAAQ,IAAKA,QAAQ,CAACC,IAAT,EADrB,EACsC;AADtC,KAEGF,IAFH,CAEQG,KAAK,IAAI,KAAKX,QAAL,CAAc;AAAEK,MAAAA,MAAM,EAAEM;AAAV,KAAd,CAFjB,EALkB,CAOiC;AACpD,GAvByB,CAyB1B;AACA;AACA;;;AAUAC,EAAAA,MAAM,GAAG;AACP;AACA,UAAM;AAAEP,MAAAA,MAAF;AAAUJ,MAAAA;AAAV,QAA0B,KAAKG,KAArC,CAFO,CAGP;;AACA,UAAMS,cAAc,GAAGR,MAAM,CAACS,MAAP,CAAcC,KAAK,IAAI;AAC5C;AACA;AACA,aAAOA,KAAK,CAACC,IAAN,CAAWC,WAAX,GAAyBC,QAAzB,CAAkCjB,WAAW,CAACgB,WAAZ,EAAlC,CAAP;AACD,KAJsB,CAAvB,CAJO,CAUP;AACA;AACA;AACA;AACA;;AACA,QAAIZ,MAAM,CAACc,MAAP,KAAkB,CAAtB,EAAyB;AACvB,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP,CADuB,CACE;AAC1B,KAFD,MAEO;AACL,0BACE;AAAK,QAAA,SAAS,EAAC,IAAf;AAAA,gCACE;AAAI,UAAA,SAAS,EAAC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAGE,QAAC,SAAD;AAAW,UAAA,YAAY,EAAE,KAAKrB;AAA9B;AAAA;AAAA;AAAA;AAAA,gBAHF,eAIE,QAAC,MAAD;AAAA,iCACE,QAAC,QAAD;AAAU,YAAA,MAAM,EAAEe;AAAlB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAJF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF;AAUD;AACF;;AAlEyB;;AAqE5B,eAAejB,GAAf,C,CAGA;AACA","sourcesContent":["import React, { Component } from 'react';\n// import CardList from '../components/CardList'; //use '..' when u are leaving a folder\nimport CardList from './CardList';\n// import SearchBox from '../components/SearchBox';\nimport SearchBox from './SearchBox';\n// import Scroll from '../components/Scroll';\nimport Scroll from './Scroll';\nimport './App.css';\n// import { robots } from './robots'; //since this isnt default must destructure. No longer Need since using the API\n\n//to use STATE must go back to the original way we created react Components ->\n//done by creating a CLASS Comp\nclass App extends Component {\n  //ADD STATE -> must use a CONSTRUCTOR funct. Declare the STATE in the constructor funct\n  //Now we have our STATE. STATE is what descirbes our App and are the things that can CHANGE\n  //that can affect our app. STATE usually lives in the PARENT COMP and passes STATE down to\n  //diffenent components \n  constructor() {\n    super()\n    //add STATE in our App (description of what our state should be)\n    this.state = {\n      robots: [],   //state need to have robots arr\n      searchfield: ''  //searchfield is an empty str\n    }\n  }\n\n  //use to get Data from an API\n  componentDidMount() {\n    //Fetch the users-makes an HTTP request to a server. \n    //Fetch recieves a Response.\n    //FETCH is a method on the WINDOW obj. Thats why it doesn't have\n    //anything attached to it (id a .)\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response =>  response.json()) //convert the response to JSON\n      .then(users => this.setState({ robots: users })) //now we're getting users back. Update them\n  }\n\n  //Make a funct for Searching stuff for the Input. MUST USE ARROW FUNCT syntax when\n  //we make our OWN methods \n  //everytime INPUT changes we get an EVENT (like in DOM manipulation)\n  onSearchChange = (event) => {\n    // console.log(event)  // gives us the entire event\n    // console.log(event.target.value) //gives us the value of the event\n    //Update the Seachfield bc its set to an empty str originally. Anytime u change change\n    //state u use this method\n    this.setState({ searchfield: event.target.value }) //searchfield always gets updated now\n    // console.log(filteredRobots)\n  }\n\n  render() {\n    //Destructuring- we say this.state a lot\n    const { robots, searchfield } = this.state;\n    //Robots is an Array\n    const filteredRobots = robots.filter(robot => {\n      //lowercase the name. If name of robots includes the SeachField(in lowercase so it \n      //works both ways). Returns Robots that turn True to this\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase()) \n    })\n\n    //What if componentDidMount() took a long time to load and we have a \n    //whole bunch of users?-> take care of this in the Render Method \n    //b4 Return\n    //could also say:\n    // if (!robots.length)  -> automatically means 0. 0==false in JS\n    if (robots.length === 0) {\n      return <h1>Loading</h1>  //add loading bar in case takes long\n    } else {\n      return (\n        <div className='tc'>\n          <h1 className='f1'>RoboFriends</h1>\n          {/* //searchChange is a PROP */}\n          <SearchBox searchChange={this.onSearchChange}/>  \n          <Scroll>\n            <CardList robots={filteredRobots}/>  \n          </Scroll>\n        </div>\n      )\n    }\n  }\n}\n\nexport default App;\n\n\n//Now that the Parent has the value of the SEARCH Input we can directly communicate the \n//Search Inputs Value to the CardList comp\n\n"]},"metadata":{},"sourceType":"module"}